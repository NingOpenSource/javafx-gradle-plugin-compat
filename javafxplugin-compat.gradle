import groovy.json.JsonOutput
import groovy.json.JsonSlurperClassic

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def isRunningInIdea = Boolean.parseBoolean(System.getProperty("idea.active"))
def isSupportJavaModule = JavaVersion.current().toString().toFloat() > 1.8 || JavaVersion.current().isJava10()

class SimpleArgs {
    private final File mPropertiesFile
    private final Properties mProperties
    private final String commitMessage = "javafxplugin-compat-0.0.1"

    SimpleArgs(File propertiesFile) {
        this.mPropertiesFile = propertiesFile
        this.mProperties = new Properties()
        if (!mPropertiesFile.exists()) {
            mPropertiesFile.createNewFile()
        }
        this.mProperties.load(mPropertiesFile.newReader("utf-8"))
    }

    private void apply() {
        this.mProperties.store(mPropertiesFile.newWriter(), commitMessage)
    }

    String getValue(Args args) {
        if (mProperties.containsKey(args.propName)) {
            return this.mProperties.getProperty(args.propName, args.defaultValue)
        } else {
            this.mProperties.setProperty(args.propName, args.defaultValue)
            apply()
            return args.defaultValue
        }
    }


    String[] getValueArray(Args args) {
        List<String> valueList = new JsonSlurperClassic().parseText(getValue(args)) as List<String>
        if (args == Args.javafxModules) {
            valueList = valueList.collect { it.replaceAll("-", ".") }//Error correction processing
        }
        return valueList.toArray(new String[0])
    }

    void check() {
        Args.values().each {
            println("javafxplugin-compat-args: ${it.propName}=${getValue(it)}")
        }
    }
}

enum Args {
    /**
     * <a href="https://mvnrepository.com/artifact/org.openjfx/javafx-base">org.openjfx:javafx-base:version</a>
     */
    javafxVersion("javafx.version", "15"),
    /**
     * <a href="https://github.com/openjfx/javafx-gradle-plugin/releases">javafx-gradle-plugin</a>
     */
    javafxPluginVersion("javafx.pluginVersion", "0.0.9"),
    /**
     * <a href="https://mvnrepository.com/artifact/org.openjfx">javafx.modules</a>
     */
    javafxModules("javafx.modules", JsonOutput.toJson(["javafx.base"])),
    /**
     * name of application's 'module-info.java'
     */
    javafxMainModule("javafx.mainModule", "")

    final String propName
    final String defaultValue

    private Args(String propName, String defaultValue) {
        this.propName = propName
        this.defaultValue = defaultValue
    }

}

SimpleArgs simpleArgs = new SimpleArgs(new File(projectDir, 'javafxplugin-compat.properties'))

simpleArgs.check()


compileKotlin {
    String jvmTargetString = JavaVersion.current().toString()
    if (JavaVersion.current().isJava10()) {
        jvmTargetString = "10"
        println("not support java10")
    } else if (JavaVersion.current().isJava9()) {
        jvmTargetString = "9"
        println("not support java9")
    }
    kotlinOptions.jvmTarget = jvmTargetString
}
compileTestKotlin {
    kotlinOptions.jvmTarget = compileKotlin.kotlinOptions.jvmTarget
}

configurations {
    api {
        setCanBeConsumed(true)
        setCanBeResolved(true)
    }
    implementation {
        setCanBeConsumed(true)
        setCanBeResolved(true)
    }
    apiJavaFXCurrentOs {
        setCanBeConsumed(true)
        setCanBeResolved(true)
    }
    apiJavaFX_Windows {
        setCanBeConsumed(true)
        setCanBeResolved(true)
    }
    apiJavaFX_Mac {
        setCanBeConsumed(true)
        setCanBeResolved(true)
    }
    apiJavaFX_Linux {
        setCanBeConsumed(true)
        setCanBeResolved(true)
    }
}

if (isSupportJavaModule) {
    apply plugin: "org.openjfx.javafxplugin"
    application {
        mainModule.set(simpleArgs.getValue(Args.javafxMainModule))
    }

    String javafxVersion = simpleArgs.getValue(Args.javafxVersion)
    String[] javafxModules = simpleArgs.getValueArray(Args.javafxModules)
    javafx {
        version = javafxVersion
        modules = javafxModules
        configuration = "api"
    }
    dependencies {
        javafxModules.each {
            String moduleName = it.replace(".", "-")
            String mavenId = "org.openjfx:$moduleName:$javafxVersion"
            println("mavenId $mavenId")
            if (!currentOS.isLinux()) {
                apiJavaFX_Linux("$mavenId:linux")
            }
            if (!currentOS.isMacOsX()) {
                apiJavaFX_Mac("$mavenId:mac")
            }
            if (!currentOS.isWindows()) {
                apiJavaFX_Windows("$mavenId:win")
            }
        }
    }
} else {
    sourceSets {
        main {
            java {
                println("..............java9以下排除module-info.java文件")
                exclude 'module-info.java'//java9以下排除module-info.java文件
            }
        }
    }
    java {
        sourceCompatibility = JavaVersion.current()
        modularity.inferModulePath = false
    }
    kotlin {
        sourceCompatibility == JavaVersion.current()
    }
}


if (!plugins.hasPlugin("application"))
    return

enum JarFlag {
    linux("-linux"), mac("-mac"), windows("-windows"), all("-all"), current("");
    final String suffixName

    JarFlag(String suffixName) {
        this.suffixName = suffixName
    }
}

for (JarFlag jarFlag : JarFlag.values()) {
    if (!isSupportJavaModule && jarFlag != JarFlag.current) continue
    task("runnableJar" + (jarFlag == JarFlag.current ? "" : "_${jarFlag.name()}"), type: Jar, dependsOn: [jar], group: "build") {
        manifest {
            attributes(
                    "Manifest-Version": project.version,
                    "Main-Class": mainClassName
            )
        }
        def sourceTree = configurations.api.collect { entry -> zipTree(entry) }
        sourceTree.add(zipTree(jar.archiveFile.get().asFile))//加入项目源码编译后的jar
        sourceTree.addAll(configurations.implementation.collect { entry -> zipTree(entry) })
        if (isSupportJavaModule && jarFlag != JarFlag.current) {
            if (!currentOS.isMacOsX() && (jarFlag == JarFlag.mac || jarFlag == JarFlag.all))
                sourceTree.addAll(configurations.apiJavaFX_Mac.collect { entry -> zipTree(entry) })
            if (!currentOS.isLinux() && (jarFlag == JarFlag.linux || jarFlag == JarFlag.all))
                sourceTree.addAll(configurations.apiJavaFX_Linux.collect { entry -> zipTree(entry) })
            if (!currentOS.isWindows() && (jarFlag == JarFlag.windows || jarFlag == JarFlag.all))
                sourceTree.addAll(configurations.apiJavaFX_Windows.collect { entry -> zipTree(entry) })
        }
        from(sourceTree) {
            exclude "META-INF/MANIFEST.MF"
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
            if (isSupportJavaModule && jarFlag != JarFlag.all && jarFlag != JarFlag.current) {
                if (jarFlag != JarFlag.mac)
                    exclude("*.dylib")
                if (jarFlag != JarFlag.linux)
                    exclude("*.so")
                if (jarFlag != JarFlag.windows)
                    exclude("*.dll")
            }
        }
        archiveName("${archiveBaseName.get()}-${JavaVersion.current().toString()}-v${archiveVersion.get()}${jarFlag.suffixName}.${archiveExtension.get()}")
        destinationDir(file("out/runnableJar"))
    }
}
